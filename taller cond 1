; 1
(define (mayor x y)
  (cond
    ((> x y) x)
    ((> y x) y)
    (else "son iguales")

    ))
(define (principal1)
  (begin
    (displayln "digita el primer numero:")
    (define n1 (read))
    (displayln "digita el segundo numero:")
    (define n2 (read))
    (display "El numero mayor es: ")
    (mayor n1 n2))) 

;2
(define (asc x y)
  (cond
    ((> x y) (begin
               (displayln x) (display y)))
    ((> y x) (begin
               (displayln y) (display x)))
    
    (else (begin
            (displayln "son iguales") (displayln x) (display y)))
    ))

(define (principal2)
  (begin
    (displayln "digita el primer numero:")
    (define n1 (read))
    (displayln "digita el segundo numero:")
    (define n2 (read))
    (displayln "la forma en ascendente de estos numeros es:")
    (asc n1 n2)))

;3
(define (positivo? x)
  (cond
    ((> x 0) (display "positivo"))
    (else (* x x))
    ))
(define (principal3)
  (begin
    (displayln "digite un numero:")
    (define p (read))
    (positivo? p)
    ))


;4
(define (compra x)
  (cond
    ((> x 100000) (* 0.8 x))
    (else x)
    ))
(define (principal4)
  (begin
    (displayln "digite el valor de la compra:")
    (define c (read))
    (displayln "el total a pagar es de: ")
    (compra c)
    ))
;5
(define (prcam x p)
  (cond
    ((>= x 3) (* (* p x) 0.8))
    ((< x 3) (* (* p x) 0.9))
    ))
(define (principal5)
  (begin
    (displayln "digite el numero de camisas en la compra:")
    (define n (read))
    (displayln "digite el precio de cada camisa:")
    (define pr (read))
    (displayln "el total a pagar es de: ")
    (prcam n pr)
    )) 

;6
(define (pago x)
  (cond
    ((< x 5) (begin(display "Paga: ")(display (* x 80000))(displayln " pesos")) )
    ((>= x 5)(begin (display "Paga: ") (display (* x 70000))(displayln " pesos")) )))

(define (principal6)
  (begin
    (displayln "Cantidad de llanatas: ")(define x (read))

    (pago x)
    ))
;7
(define (orden a b)(cond
                     ((= a b) (* a b))
                     ((> a b) (- a b))
                     ((< a b) (+ a b))
                     ))
(define
  (principal7)
  (begin
    (display "Primer numero: ")  (define a (read))
    (display "Segundo numero: ")(define b (read))
    (orden a b)))
;8
(define
  (mayor2 a b)
  (cond
    ((> a b) a)
    ((< a b) b)
    ))
(define (mayor3 a b c)
  (mayor2 (mayor2 a b) c))
(define (principal8)
  (begin
    (display "Primer numero: ")  (define a (read))
    (display "Segundo numero: ")(define b (read))
    (display "Tercer numero: ")(define c (read))
    (mayor3 a b c)
    )
  )
;9
(define
  (quees a b c d)
  (cond
    ((and (= c 1)(and (>= b 18)(= d 2))) (begin (display a)(display ", ")(display b)(display ", ")(display "Mujer")(display ", ")(display "Casadajuana}")))
    ((and (= c 2)(= d 1))(display a))))
    

(define (principal10)
  (begin
    (display "Nombre: ")  (define a (read))
    (display "Edad: ")(define b (read))
    (display "Sexo (1 mujer, 2 hombre): ")(define c (read))
    (display "Estado civil (1 Soltero, 2 comprometido): ")(define d (read))
    (quees a b c d )
    )
  )
;10
(define
  (quees a b c d)
  (cond
    ((and (= c 1)(and (>= b 18)(= d 2))) (begin (display a)(display ", ")(display b)(display ", ")(display "Mujer")(display ", ")(display "Casadajuana}")))
    ((and (= c 2)(= d 1))(display a))))
    

(define (principal10)
  (begin
    (display "Nombre: ")  (define a (read))
    (display "Edad: ")(define b (read))
    (display "Sexo (1 mujer, 2 hombre): ")(define c (read))
    (display "Estado civil (1 Soltero, 2 comprometido): ")(define d (read))
    (quees a b c d )
    )
  )
;11
(define (mayor1 x)
  (cond((= x 1) (display "Adult@"))
       ((= x 2) (display "Joven"))
       ((= x 3) (display "Niñ@"))
       )
  )

(define (principal11)
  (begin
    (display "Digíte 1, 2 ó 3:\t")
    (define e (read))
    (mayor1 e)
    )
  )

;12
(define (cuota x)
  (cond ((< x 500000) (begin (display "Su cuota es igual a el 3%:\t$")
                             (display (* x 0.03))))
        ((>= x 500000) (begin
                         (display "Su cuota es igual al 2%:\t$")
                         (display (* x 0.02))))       
        )
  )

(define (principal12)
  (begin
    (display "Digíte el monto del seguro:\t$")
    (define m (read))
    (cuota m)
    )
  )

;13
(define (pat x y)
  (cond ((and (>= x 2000000) (>= y 3)
              (* x 1.03)))
        )
  )


(define (factura n N p e)
  (begin
    (displayln N)
    (newline)
    (display "Debe pagar:")
    (newline)
    (displayln "Valor constante:\t\t\t$500000")
    (display "\t\t\t\t\t$")
    (display (pat p e))
    (newline)
    (display "Total:\t\t\t\t$")
    (+ 500000 (pat p e))
    )
  )

(define (principal13)
  (begin
    (display "Digíte su número de inscripción:\t\t\t")
    (define n (read))
    (display "Digíte su nombre:\t\t\t")
    (define N (read))
    (display "Digíte su ptrimonio:\t\t\t$")
    (define p (read))
    (display "Digíte su estrato:\t\t\t")
    (define e  (read))
    (display (factura n N p e))
    )
  )

;14
(define (servicios x)
  (cond ( (or (= x 1) (= x 2)) (* 80000 1.05))
        ( (or (= x 3)(= x 4) )(* 80000 1.1))
        ( (or (= x 5)(= x 6) )(* 80000 1.2))
        )
  )

(define (lector N D E)
  (displayln N)
  (display (servicios E))
  )

(define(principal14)
  (begin
    (display "Digíte su nombre: ")
    (define nomb (read))
    (display "De su dirección: ")
    (define dir (read))
    (display "¿Cuál es su estrato?  ")
    (define est (read))
    (lector nomb dir est)
    )
  )

;15
(define IVA 0.19)

(define (precio x y)
  (cond ((and (>= x 1000000)(= y 1)) (* x 0.85))
        ((>= x 1000000) (* x 0.9))
        ((= y 1) (+(* x 0.95) (* x IVA)))
        (else (+ x (* x IVA)) )
        )
  )

(define (principal15)
  (begin
    (display "Digíte el valor del cumpotador: ")
    (define c (read))
    (display "Digíte la marca del computador (Si el computador es ABACO digíte 1): ")
    (define m (read))
    (precio c m)
    )
  )
;17)
(define (datos a b)
  (cond ((and (>= a 0) (<= a 2)) b)
        ((and (>= a 3) (<= a 5)) (- b (* b 0.10)))
        ((and (>= a 6) (<= a 10)) (- b (* b 0.15)))
        ((> a 11) (- b (* b 0.18)))))
(define (principal17)
  (display "Numero de peras: ")
  (define a (read))
  (display "Valor de compra: ")
  (define b (read))
  (display "Valor a pagar: ")
  (datos a b)
  )


;18)
(define (tiempo a b)
  (cond ((< a 1) (+ b (/ (* b 5) 100)))
        ((and (>= a 1) (< a 2)) (+ b (/ (* b 7) 100)))
        ((and (>= a 2) (< a 5)) (+ b (/ (* b 10) 100)))
        ((and (>= a 5) (< a 10)) (+ b (/ (* b 15) 100)))
        ((>= a 10) (+ b (/ (* b 20) 100)))))
(define (principal18)
  (display "Ingresar numero de años: ")
  (define a (read))
  (display "Ingresar salario: ")
  (define b (read))
  (display "La utilidad recibida es: ")
  (tiempo a b)
  )


;19)
(define (llantas a)
  (cond ((< a 5) (* a 30000))
        ((and (>= a 5) (<= a 10)) (* a 25000))
        ((> a 10) (* a 20000))))
(define (principal19)
  (display "Ingrese numero de llantas: ")
  (define a (read))
  (display "El total a pagar es: ")
  (llantas a)
  )


;20)
(define (datos a b c d f)
  (cond ((and (and (= b 2) (= c 1)) (and (>= a 35) (<= a 45))) (* f 3))
        ((and (and (= b 1) (= c 3)) (< a 30)) (/ f 3))
        ((and (and (= b 2) (= d 3)) (> a 55)) (- f 50000))
        (else f)))
(define (principal20)
  (display "Ingresar edad: ")
  (define a (read))
  (display "Ingresar sexo (1=hombre, 2=mujer): ")
  (define b (read))
  (display "Ingresar tipo (1=alto, 2=bajo, 3=medio): ")
  (define c (read))
  (display "Ingresar nacionalidad (1=latino, 2=alemán, 3=hindú, 4=colombiano): ")
  (define d (read))
  (display "Ingresar valor: ")
  (define f (read))
  (display "Valor resultante: ")
  (datos a b c d f)
  )


;principal
(define (principalt x)
  
  (cond ((= x 1) (principal1))
        ((= x 2) (principal2))
        ((= x 3) (principal3))
        ((= x 4) (principal4))
        ((= x 5) (principal5))
        ((= x 6) (principal6))
        ((= x 7) (principal7))
        ((= x 8) (principal8))
        ((= x 9) (principal9))
        ((= x 10) (principal10))
        ((= x 11) (principal11))
        ((= x 12) (principal12))
        ((= x 13) (principal13))
        ((= x 14) (principal14))
        ((= x 15) (principal15))
        ((= x 16) (principal16))
        ((= x 17) (principal17))
        ((= x 18) (principal18))
        ((= x 19) (principal19))
        ((= x 20) (principal20))
        ))

(define (principal)
  (begin
    (define x (read))
    (principalt x))) (principal)

  
